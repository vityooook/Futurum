#include "imports/stdlib_s.fc";

global slice target_address;
global int commission;
global slice hash;

const op::transfer_notification = 0x7362d09c;
const op::transfer = 0xf8a7ea5;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    target_address = ds~load_msg_addr();
    commission = ds~load_coins();
    hash = ds~load_bits(256);
}

() send_msg(slice to_address, int amount, cell payload, int send_mode) impure inline {

    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(payload);

    send_raw_message(msg.end_cell(), send_mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();

    if (in_msg_body.slice_empty?()) {
        throw_if(666, msg_value < 10000000);
        cell payload = begin_cell().store_uint(0, 32).store_uint(0, 32).end_cell();
        raw_reserve(1000000 , 0);
        send_msg(target_address , 0, payload, 128);
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        in_msg_body~load_msg_addr(); ;; skip address
        throw_if(777, msg_value < commission);
        cell payload = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(target_address)
            .store_slice(target_address)
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(0, 1)
            .end_cell();

        raw_reserve(1000000 , 0);
        send_msg(sender_address, 0, payload, 128);
        return ();

    }

    if (op == 1) {
        throw_unless(402, equal_slices(sender_address, target_address));
        slice to = in_msg_body~load_msg_addr();
        int amount_jetton = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();

        var msg_payload = begin_cell()
        .store_uint(op::transfer, 32) ;; transfer
        .store_uint(0, 64)
        .store_coins(amount_jetton)
        .store_slice(to)
        .store_slice(to)
        .store_int(0, 1)
        .store_coins(1)
        .store_uint(0, 1)
        .end_cell();

        send_msg(jetton_wallet_address, 40000000, msg_payload, 3);
    }
    throw(0xffff);
}
